import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class GameOfColonies extends JPanel implements ActionListener {

    private static final int WIDTH = 1200;
    private static final int HEIGHT = 800;
    private static final int CELL_SIZE = 4;
    private static final int COLS = WIDTH / CELL_SIZE;
    private static final int ROWS = HEIGHT / CELL_SIZE;
    private static final int INITIAL_COLONIES = 10;
    private static final int GENERATION_INTERVAL = 200;

    private int[][] grid = new int[COLS][ROWS];
    private Color[][] colors = new Color[COLS][ROWS];
    private Random random = new Random();
    private javax.swing.Timer timer;
    private int generations = 0;
    private int livingCells = 0;

    private JButton exitButton;
    private JButton resetButton;

    public GameOfColonies() {
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(Color.WHITE);
        initializeColonies();
        timer = new javax.swing.Timer(GENERATION_INTERVAL, this);
        timer.start();

        exitButton = new JButton("Wyjdź");
        exitButton.addActionListener(e -> System.exit(0));
        setLayout(new BorderLayout());
        add(exitButton, BorderLayout.SOUTH);

        resetButton = new JButton("Reset");
        resetButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetGame();
            }
        });
        add(resetButton, BorderLayout.SOUTH);

        initializeCatastrophesForked(); // Uruchomienie losowych katastrof
    }

    private void resetGame() {
        generations = 0;
        livingCells = 0;
        for (int x = 0; x < COLS; x++) {
            for (int y = 0; y < ROWS; y++) {
                grid[x][y] = 0;
                colors[x][y] = null;
            }
        }
        initializeColonies();
        repaint();
    }

    private void initializeColonies() {
        for (int i = 0; i < INITIAL_COLONIES; i++) {
            int x = random.nextInt(COLS);
            int y = random.nextInt(ROWS);
            Color color = new Color(random.nextInt(256), random.nextInt(256), random.nextInt(256));
            grid[x][y] = 1;
            colors[x][y] = color;
            for (int dx = -1; dx <= 1; dx++) {
                for (int dy = -1; dy <= 1; dy++) {
                    int newX = (x + dx + COLS) % COLS;
                    int newY = (y + dy + ROWS) % ROWS;
                    if (grid[newX][newY] == 0 && random.nextInt(2) == 0) { // Losowa inicjalizacja sąsiadów
                        grid[newX][newY] = 1;
                        colors[newX][newY] = color;
                    }
                }
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        updateColonies();
        repaint();
        generations++;
    }

    private void updateColonies() {
        int[][] newGrid = new int[COLS][ROWS];
        Color[][] newColors = new Color[COLS][ROWS];
        livingCells = 0;

        for (int x = 0; x < COLS; x++) {
            for (int y = 0; y < ROWS; y++) {
                int aliveNeighbors = countAliveNeighbors(x, y);

                if (grid[x][y] == 1) { 
                    if (aliveNeighbors < 2 || aliveNeighbors > 3) {
                        newGrid[x][y] = 0;
                        newColors[x][y] = null;
                    } else {
                        newGrid[x][y] = 1;
                        newColors[x][y] = colors[x][y];
                        livingCells++;
                    }
                } else { 
                    if (aliveNeighbors == 2) {
                        newGrid[x][y] = 1;
                        newColors[x][y] = getDominantNeighborColor(x, y);
                        livingCells++;
                    }
                }
            }
        }

        grid = newGrid;
        colors = newColors;
    }

    private int countAliveNeighbors(int x, int y) {
        int count = 0;
        for (int dx = -1; dx <= 1; dx++) {
            for (int dy = -1; dy <= 1; dy++) {
                if (dx != 0 || dy != 0) {
                    int newX = (x + dx + COLS) % COLS;
                    int newY = (y + dy + ROWS) % ROWS;
                    if (grid[newX][newY] == 1) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

    private Color getDominantNeighborColor(int x, int y) {
        Map<Color, Integer> colorCount = new HashMap<>();

        for (int dx = -1; dx <= 1; dx++) {
            for (int dy = -1; dy <= 1; dy++) {
                if (dx != 0 || dy != 0) {
                    int newX = (x + dx + COLS) % COLS;
                    int newY = (y + dy + ROWS) % ROWS;
                    if (grid[newX][newY] == 1) {
                        Color neighborColor = colors[newX][newY];
                        colorCount.put(neighborColor, colorCount.getOrDefault(neighborColor, 0) + 1);
                    }
                }
            }
        }

        return colorCount.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse(Color.WHITE);
    }

    // Inicjalizacja wątku katastrof
    private void initializeCatastrophesForked() {
        new Thread(() -> {
            while (true) {
                try {
                    Thread.sleep((random.nextInt(10) + 5) * 1000); // Losowy czas (5-15 sekund)
                    causeCatastrophe(); // Wywołanie katastrofy
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    // Wywołanie katastrofy na losowym obszarze
    private void causeCatastrophe() {
        int centerX = random.nextInt(COLS); // Losowe współrzędne środka katastrofy
        int centerY = random.nextInt(ROWS);
        int radius = random.nextInt(20) + 10; // Losowy promień (10-30 komórek)

        for (int x = -radius; x <= radius; x++) {
            for (int y = -radius; y <= radius; y++) {
                int newX = (centerX + x + COLS) % COLS; 
                int newY = (centerY + y + ROWS) % ROWS; 
                if (x * x + y * y <= radius * radius) { 
                    grid[newX][newY] = 0;
                    colors[newX][newY] = null;
                }
            }
        }
        repaint(); // Odśwież ekran po katastrofie
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (int x = 0; x < COLS; x++) {
            for (int y = 0; y < ROWS; y++) {
                if (grid[x][y] == 1) {
                    g.setColor(colors[x][y]);
                    g.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                } else {
                    g.setColor(Color.WHITE);
                    g.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                }
            }
        }

        g.setColor(Color.WHITE);
        for (int x = 1; x < COLS; x++) {
            g.drawLine(x * CELL_SIZE, 0, x * CELL_SIZE, HEIGHT);
        }
        for (int y = 1; y < ROWS; y++) {
            g.drawLine(0, y * CELL_SIZE, WIDTH, y * CELL_SIZE);
        }

        g.setColor(Color.BLACK);
        g.setFont(new Font("Arial", Font.BOLD, 12));
        g.drawString("Generacja: " + generations, 10, exitButton.getY() - 15);
        g.drawString("Żywe komórki: " + livingCells, 10, exitButton.getY() - 5);
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Game of Colonies");
        GameOfColonies game = new GameOfColonies();
        frame.add(game);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
